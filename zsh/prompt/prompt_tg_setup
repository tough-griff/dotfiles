# A simple ZSH prompt with git info
#
# ~/path ❯❯❯              (default)
# ~/repo git:master ❯❯❯   (in git repo)
#
# * shows to the right with unstaged changes
# + shows to the right with staged additions/changes
# - shows to the right with staged deletions
# ⇡ shows to the right when ahead of origin
# ⇣ shows to the right when behind origin

# Stolen from https://github.com/sorin-ionescu/prezto/blob/master/modules/prompt/functions/prompt_sorin_setup
# Beautifully shortens paths like ~/dotfiles/zsh/prompt to ~/d/z/prompt
function _prompt_tg_cwd {
  local cwd="${PWD/#$HOME/~}"

  if [[ "${cwd}" == (#m)[/~] ]]; then
    _cwd="${MATCH}"
    unset MATCH
  else
    _cwd="${${${${(@j:/:M)${(@s:/:)cwd}##.#?}:h}%/}//\%/%%}/${${cwd:t}//\%/%%}"
  fi
}

# git checks taken in part from https://github.com/sindresorhus/pure/blob/master/pure.zsh
#   @note exits early when no git repo is detected
function _prompt_tg_git_info {
  command git rev-parse --abbrev-ref @ &>/dev/null || return

  _git_status=$(command git status --porcelain --ignore-submodules -unormal 2>/dev/null)

  _git_dirty=$(_prompt_tg_check_git_dirty)
  _git_stashed=$(_prompt_tg_check_git_stashed)
  _git_added=$(_prompt_tg_check_git_added)
  _git_arrows=$(_prompt_tg_check_git_ahead_behind)
  _git_removed=$(_prompt_tg_check_git_removed)
}

# Checks for unstaged deleted ( D), modified ( M), or unknown (??) files
function _prompt_tg_check_git_dirty {
  local dirty=''
  (( $(egrep '^(.[DM]|\?\?)' <<< ${_git_status} | wc -l) > 0 )) && dirty="*"
  [[ "${dirty}" != "" ]] && echo "${dirty}"
}

# Checks for stashed changes
function _prompt_tg_check_git_stashed {
  local stashed=''
  (( $(command git stash list | wc -l) > 0 )) && stashed="."
  [[ "${stashed}" != "" ]] && echo "${stashed}"
}

# Checks for staged added (A ), modified (M ), or renamed (R ) files
function _prompt_tg_check_git_added {
  local added=''
  (( $(egrep '^[AMR]' <<< ${_git_status} | wc -l) > 0 )) && added="+"
  [[ "${added}" != "" ]] && echo "${added}"
}

# Checks for staged deleted (D ) files.
function _prompt_tg_check_git_removed {
  local removed=''
  (( $(egrep '^D' <<< ${_git_status} | wc -l) > 0 )) && removed="-"
  [[ "${removed}" != "" ]] && echo "${removed}"
}

# Checks whether the local repository is ahead or behind of origin
#   @note requires an upstream branch to be set, otherwise exits early
function _prompt_tg_check_git_ahead_behind {
  command git rev-parse --abbrev-ref @'{u}' &>/dev/null || return

  local arrows=''
  (( $(command git rev-list --right-only --count HEAD...@'{u}' 2>/dev/null) > 0 )) && arrows="⇣"
  (( $(command git rev-list --left-only --count HEAD...@'{u}' 2>/dev/null) > 0 )) && arrows+="⇡"
  [[ "${arrows}" != "" ]] && echo "${arrows}"
}

function _prompt_tg_precmd {
  _prompt_tg_cwd
  _prompt_tg_git_info
  vcs_info

  print -Pn "\e]0;"
  print -Pnr "${_cwd}"
  print -Pn "\a"
}

# Cleanup prompt vars between commands
function _prompt_tg_preexec {
  unset _cwd
  unset _git_status
  unset _git_dirty
  unset _git_added
  unset _git_removed
  unset _git_arrows
}

function prompt_tg_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  add-zsh-hook precmd _prompt_tg_precmd
  add-zsh-hook preexec _prompt_tg_preexec

  zstyle ':vcs_info:*' enable git
  zstyle ':vsc_info:*' use-simple true
  zstyle ':vcs_info:*' formats '%F{green}%s:%b%f '
  zstyle ':vcs_info:*' actionformats '%F{yellow}%s:%b:%a%f '

  PROMPT='%F{cyan}${_cwd}%f ${vcs_info_msg_0_}%F{red}%(!.# .)❯%f%F{yellow}❯%f%(?.%F{green}.%F{red})❯%f '
  PROMPT2='%F{yellow}%_%f %F{green}...%f '
  PROMPT3='%F{yellow}? %F{green}#%f '
  PROMPT4='%F{yellow}+%N:%i %F{green}❯%f '
  RPROMPT='%F{blue}${_git_dirty}%f%F{cyan}${_git_stashed}%f%F{green}${_git_added}%f%F{red}${_git_removed}%f%F{cyan}${_git_arrows}%f'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_tg_setup "$@"
