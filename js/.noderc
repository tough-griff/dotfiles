#!/usr/bin/env node

/** @typedef {import("repl").REPLServer} REPLServer */
/** @typedef {import("vm").Context} Context */

const Bluebird = require('bluebird');
const chalk = require('chalk');
const _ = require('lodash');

const defaultValCallback = i => i + 1;
const defaultKeyCallback = c => String.fromCharCode(96 + (c + 1));

/**
 * @param {Context} context
 */
const init = (context) => {
  Object.defineProperties(context, {
    Bluebird: {
      value: Bluebird.getNewLibraryCopy()
    },
    _: {
      value: _.runInContext(context)
    }
  });
};

/**
 * @param {REPLServer} repl
 */
module.exports = function configure(repl) {
  repl.setPrompt(`${process.version} ${chalk.green('❯')} `);

  init(repl.context);
  repl.on('reset', init);

  Object.defineProperty(Array, 'toy', {
    /**
     * Generates an array of length `n` with values generated by the callback.
     * @param {number} n
     * @param {(num: number) => any} callback
     * @returns {any[]}
     */
    value: function toy(n = 10, callback = defaultValCallback) {
      return _.times(n, callback);
    }
  });

  Object.defineProperty(Object, 'toy', {
    /**
     * Generates an object with `n` key value pairs. Each key and value is
     * generated by a callback.
     * @param {number} n
     * @param {(num: number) => string} keyCallback
     * @param {(num: number) => any} valCallback
     * @returns {{string: any}}
     */
    value: function toy(n = 10, keyCallback = defaultKeyCallback, valCallback = defaultValCallback) {
      const keyArray = Array.toy(n, keyCallback);
      const valArray = Array.toy(n, valCallback);

      return _.zipObject(keyArray, valArray);
    }
  });
};
